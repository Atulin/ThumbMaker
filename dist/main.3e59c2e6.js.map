{"version":3,"sources":["ts/canvasExtensions.ts","ts/main.ts"],"names":[],"mappings":";AAIA,yBAAyB,UAAU,OAAS,SAAU,EAAW,EAAW,GACnE,KAAA,IAAI,EAAG,EAAG,EAAQ,EAAG,KAAK;;ACuH/B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA5HJ,QAAA,sBAEA,IAAI,EAA6B,SAAS,eAAe,UACrD,EAAM,EAAO,WAAW,MAEtB,EAAQ,GAER,EAAwB,EAAR,EAAa,EAE7B,EAAO,QAAuB,IAAf,EAAkB,gBACjC,EAAO,EAAe,EACtB,EAAQ,EAAO,OAAS,EAAgB,GAAK,EAG/C,EAAO,KACP,EAAQ,UACR,EAAK,KAKT,SAAS,eAAe,UAAU,iBAAiB,SAAU,SAAA,GACzD,EAAQ,EAAE,cAAmC,MAAM,WACnD,MAGJ,IAAM,EAAS,SAAS,eAAe,SACjC,EAAS,SAAS,eAAe,OA8BvC,SAAS,IAKD,GAHJ,EAAI,UAAU,EAAG,EAAG,EAAO,MAAO,EAAO,QAG9B,OAAP,EAAa,CACT,IAAA,EAAQ,KAAK,IAAI,EAAO,MAAQ,EAAG,MAAO,EAAO,OAAS,EAAG,QACjE,EAAI,UACA,GACE,EAAO,MAAQ,GAAS,EAAM,EAAG,MAAQ,EAAK,EAC/C,EAAO,OAAU,EAAI,EAAS,EAAG,OAAS,EAAK,EAChD,EAAG,MAAQ,EACX,EAAG,OAAS,GAMpB,EAAI,UAAY,EAChB,EAAI,YAAc,QAClB,EAAI,WAAa,GAEjB,EAAI,SAAS,EAAG,EAAG,EAAO,EAAO,QACjC,EAAI,SAAS,EAAG,EAAO,OAAS,EAAO,EAAO,MAAO,GAErD,EAAI,YAAc,OAClB,EAAI,WAAa,EACjB,EAAI,SAAS,EAAG,EAAG,EAAO,EAAO,QAGjC,EAAI,KAAO,EACX,EAAI,UAAY,SAChB,EAAI,aAAe,SAGnB,EAAI,UAAY,QAChB,EAAI,YAAc,QAClB,EAAI,WAAa,GACjB,EAAI,SAAS,EAAM,EAAM,GAEzB,EAAI,YAAc,OAClB,EAAI,WAAa,EAGjB,EAAI,YACJ,EAAI,OAAO,EAAe,EAAI,EAAO,OAAS,EAAgB,EAAG,GACjE,EAAI,UAAY,EAChB,EAAI,YAAc,QAClB,EAAI,WAAa,GACjB,EAAI,OAGJ,EAAI,YAAc,OAClB,EAAI,WAAa,EAGjB,EAAI,UAAY,GAChB,EAAI,YAAc,EAClB,EAAI,WAAW,EAAM,EAAM,GAG3B,EAAI,UAAY,QAChB,EAAI,YAAc,QAClB,EAAI,WAAa,GACjB,EAAI,SAAS,EAAM,EAAM,GA7F7B,EAAO,iBAAiB,SAAU,SAAA,GAC9B,EAAS,EAAE,cAAmC,MAC9C,EAAO,MAAQ,EACf,MAEJ,EAAO,iBAAiB,QAAS,SAAA,GACzB,IAAA,EAAO,EAAE,cAAmC,MAC1C,kBAAkB,KAAK,KAC7B,EAAQ,EAAO,MAAQ,EACvB,OAGJ,SAAS,eAAe,cAAc,iBAAiB,SAAU,SAAA,GACzD,IAAA,EAAM,IAAI,gBAAiB,EAAE,OAA4B,MAAM,KACnE,EAAK,IAAI,OACN,IAAM,EACT,EAAG,OAAS,WACR,OAIR,SAAS,eAAe,YAAY,iBAAiB,QAAS,SAAA,GACtD,IAAA,EAAO,SAAS,cAAc,KAClC,EAAK,SAAW,QAAQ,EAAI,OAC5B,EAAK,KAAO,EAAO,UAAU,cAC7B,EAAK,UAuET","file":"main.3e59c2e6.js","sourceRoot":"..","sourcesContent":["interface CanvasRenderingContext2D {\r\n    Circle(x: number, y: number, radius: number)\r\n}\r\n\r\nCanvasRenderingContext2D.prototype.Circle = function (x: number, y: number, radius: number) {\r\n    this.arc(x, y, radius, 0, 360, false);\r\n}\r\n","import './canvasExtensions';\r\n\r\nlet canvas : HTMLCanvasElement = document.getElementById('canvas') as HTMLCanvasElement;\r\nlet ctx = canvas.getContext('2d');\r\n\r\nconst guide = 80;\r\n\r\nconst circleRadius = (guide * 3) / 2;\r\n\r\nconst font = `bold ${circleRadius * 1.6}px sans-serif`;\r\nconst posX = circleRadius + 5;\r\nconst posY = (canvas.height - circleRadius) + 10 - 5;\r\n\r\n// Editable variables\r\nlet text = '00';\r\nlet bgCol = '#0000ff';\r\nlet bg = null;\r\n\r\n\r\n// Set up inputs\r\n// Number in the corner\r\ndocument.getElementById('number').addEventListener('change', e => {\r\n    text = (e.currentTarget as HTMLInputElement).value.toString();\r\n    draw();\r\n});\r\n// Colours\r\nconst picker = document.getElementById('color') as HTMLInputElement;\r\nconst hexCol = document.getElementById('hex') as HTMLInputElement;\r\npicker.addEventListener('change', e => {\r\n    bgCol = (e.currentTarget as HTMLInputElement).value;\r\n    hexCol.value = bgCol;\r\n    draw();\r\n});\r\nhexCol.addEventListener('keyup', e => {\r\n    let val = (e.currentTarget as HTMLInputElement).value;\r\n    if (!(/^#[0-9A-F]{6}$/i.test(val))) return;\r\n    bgCol = picker.value = val;\r\n    draw();\r\n});\r\n// Background image\r\ndocument.getElementById('background').addEventListener('change', e => {\r\n    let url = URL.createObjectURL((e.target as HTMLInputElement).files[0]);\r\n    bg = new Image();\r\n    bg.src = url;\r\n    bg.onload = function() {\r\n        draw();\r\n    }\r\n});\r\n// Download\r\ndocument.getElementById('download').addEventListener('click', e => {\r\n    let link = document.createElement('a');\r\n    link.download = `file-${text}.jpg`;\r\n    link.href = canvas.toDataURL('image/jpeg')\r\n    link.click();\r\n});\r\n\r\n\r\nfunction draw() {\r\n    // Clear canvas\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Draw background\r\n    if (bg !== null) {\r\n        let scale = Math.max(canvas.width / bg.width, canvas.height / bg.height);\r\n        ctx.drawImage(\r\n            bg,\r\n            ((canvas.width + guide) / 2) - (bg.width / 2) * scale,\r\n            (canvas.height) / 2 - guide - (bg.height / 2) * scale,\r\n            bg.width * scale,\r\n            bg.height * scale\r\n        );\r\n    }\r\n\r\n    // Draw borders\r\n    // Set up fill and shadows\r\n    ctx.fillStyle = bgCol;\r\n    ctx.shadowColor = 'black';\r\n    ctx.shadowBlur = 20;\r\n    // Draw the borders\r\n    ctx.fillRect(0, 0, guide, canvas.height);\r\n    ctx.fillRect(0, canvas.height - guide, canvas.width, guide);\r\n    // Reset shadows and draw the vertical border again to cover a part of a shadow in the corner\r\n    ctx.shadowColor = 'none';\r\n    ctx.shadowBlur = 0;\r\n    ctx.fillRect(0, 0, guide, canvas.height);\r\n\r\n    // Set up font\r\n    ctx.font = font;\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n\r\n    // Draw text shadow behind the circle\r\n    ctx.fillStyle = 'black';\r\n    ctx.shadowColor = 'black';\r\n    ctx.shadowBlur = 50;\r\n    ctx.fillText(text, posX, posY);\r\n\r\n    ctx.shadowColor = 'none';\r\n    ctx.shadowBlur = 0;\r\n\r\n    // Draw circle\r\n    ctx.beginPath();\r\n    ctx.Circle(circleRadius + 5, (canvas.height - circleRadius) - 5, circleRadius);\r\n    ctx.fillStyle = bgCol;\r\n    ctx.shadowColor = 'black';\r\n    ctx.shadowBlur = 20;\r\n    ctx.fill();\r\n\r\n    // Reset shadow\r\n    ctx.shadowColor = 'none';\r\n    ctx.shadowBlur = 0;\r\n\r\n    // Set up the background text\r\n    ctx.lineWidth = 20;\r\n    ctx.strokeStyle = bgCol;\r\n    ctx.strokeText(text, posX, posY);\r\n\r\n    // Set up the text and its shadow\r\n    ctx.fillStyle = 'white';\r\n    ctx.shadowColor = 'black';\r\n    ctx.shadowBlur = 20;\r\n    ctx.fillText(text, posX, posY);\r\n}\r\n\r\ndraw();\r\n"]}